{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let FEATURED = "featured"
let DAPP = ""
let MOD = "mod"
let REGISTERED = "registered"
let CREATOR = "3MsTLizEg4vqNgD7ZVjhkPaZgsrN11JqzLJ"
let INPROGRESS = "in progress"
let COMPLETED = "completed"
let PENDING = "pending"
let INDISPUTE = "in dispute"
let REVISION = "revision"
let DECRYBEFEE = 2 / 100
let WAVESLET = 100000000

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
            case a:String => a
            case _ => NONE
    }
    str
}

func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
    num
}

func getKeyUserMessagesCnt(from: String, to: String) = {
    "msg_cnt_" + from + "_" + to
}

func getValueUserMessagesCnt(from: String, to: String) = {
    getNumberByKey(getKeyUserMessagesCnt(from, to))
}

# Task Message
func getKeyUserMessage(from: String, to: String, id: String) = {
    "msg_" + from + "_" + to + "_id:" + id
}

func getValueUserMessage(from: String, to: String, cnt: String) = {
    getStrByKey(getKeyUserMessage(from, to, cnt))
}

func getKeyUserMessageBlock(from: String, to: String, cnt: String) = {
    "block_msg_" + from + "_" + to + "_id:" + cnt
}

func getValueUserMessageBlock(from: String, to: String, cnt: String) = {
    getStrByKey(getKeyUserMessageBlock(from, to, cnt))
}
# Task Data
func getKeyTaskData(task: String) = {
    "datajson_" + task
}

func getValueTaskData(task: String) = {
    getStrByKey(getKeyTaskData(task))
}

# Task author section
func getKeyTaskAuthor (task: String) = {
    "author_" + task
}

func getValueTaskAuthor(task: String) = {
    
    getStrByKey(getKeyTaskAuthor(task))
}

# Task Block
func getKeyTaskBlock(task: String) = {
    "block_" + task
}

func getValueTaskBlock(task: String) = {
    getNumberByKey(getKeyTaskBlock(task))
}

# Task Bank
func getKeyTaskBank(task: String) = {
    "bank_" + task
}

func getValueTaskBank(task: String) = {
    getNumberByKey(getKeyTaskBank(task))
}

# Task Freelancer
func getKeyTaskFreelancer(task: String) = {
    "freelancer_" + task
}

func getValueTaskFreelancer(task: String) = {
    getStrByKey(getKeyTaskFreelancer(task))
}

# Task Status
func getKeyTaskStatus(task: String) = {
    "status_" + task
}

func getValueTaskStatus(task: String) = {
    getStrByKey(getKeyTaskStatus(task))
}

# Task Expiration
func getKeyTaskExpiration(task: String) = {
    "expiration_block_" + task
}

func getValueTaskExpiration(task: String) = {
    getNumberByKey(getKeyTaskExpiration(task))
}

# User Bio
func getKeyUserBio(account: String) = {
    "user_bio_" + account
}

func getValueUserBio(account: String) = {
    getStrByKey(getKeyUserBio(account))
}

# User Status
func getKeyUserStatus(account: String) = {
    "user_sts_" + account
}

func getValueUserStatus(account: String) = {
    getStrByKey(getKeyUserStatus(account))
}

# User Block
func getKeyUserBlock(account: String) = {
    "user_blk_" + account
}

# Task Report Complete
func getKeyTaskReportComplete(freelancer: String, task: String, stage: String) = {
    "rc_" + task + "_" + freelancer + "_stage:" + stage
}

func getValueTaskReportComplete(freelancer: String, task: String, stage: String) = {
    getStrByKey(getKeyTaskReportComplete(freelancer, task, stage))
}

func getKeyTaskReportCompleteCnt(task: String, freelancer: String) = {
    "rc_cnt_" + task + "_" + freelancer
}

func getValueTaskReportCompleteCnt(task: String, freelancer: String) = {
    getNumberByKey(getKeyTaskReportCompleteCnt(task, freelancer))
}

func getKeyDecrybeBalance() = {
    "decrybe_balance"
}

func getValueDecrybeBalance() = {
    getNumberByKey(getKeyDecrybeBalance())
}

@Callable(i)
func withdrawDecrybeBalance(amount: Int) = {
    let account = toBase58String(i.caller.bytes)
    let balance = getValueDecrybeBalance()
    if (account == CREATOR) then {
        if (amount <= balance) then {
            TransferSet([
                ScriptTransfer(addressFromStringValue(account), amount, unit)
            ])
        } else throw("You cannot withdraw an amount greater than " + toString(balance))
    } else throw("You can't do that")
}

@Callable(i)
func createTask(task: String, expiration: Int, data: String) = {
    let account = toBase58String(i.caller.bytes)
    let pmt = extract(i.payment)
    let pmtAmount = pmt.amount
    let payment = (pmtAmount / (1*WAVESLET + DECRYBEFEE)) * WAVESLET
    let commission = pmtAmount - payment
    if (isDefined(pmt.assetId)) then throw("Can use waves only at the moment")
    else {
        if (pmtAmount == 0) then throw("Amount must be higher then 0")
        else if (getValueTaskAuthor(task) != NONE) then throw("Task already exist")
        else if (getValueUserBio(account) == NONE) then throw("User not signup")
        else WriteSet([
            DataEntry(getKeyTaskAuthor(task), account),
            DataEntry(getKeyTaskBlock(task), height),
            DataEntry(getKeyTaskExpiration(task), height + expiration),
            DataEntry(getKeyTaskBank(task), payment),
            DataEntry(getKeyTaskStatus(task), FEATURED),
            DataEntry(getKeyTaskData(task), data),
            DataEntry(getKeyDecrybeBalance(), getValueDecrybeBalance() + commission)
        ])
    }
}

@Callable(i)
func signUp(data: String) = { 
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) != NONE) then throw("User already exist")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data),
            DataEntry(getKeyUserBlock(account), height),
            DataEntry(getKeyUserStatus(account), REGISTERED)
        ])
    }
    
}

@Callable(i)
func hireFreelancer(task: String, freelancer: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueUserBio(account) == NONE) then throw("Customer not signup")
    else if (getValueUserBio(freelancer) == NONE) then throw("Freelancer not signup")
    else if (getValueTaskAuthor(task) != account) then throw("You're not author")
    else if (getValueTaskStatus(task) == INPROGRESS) then throw("Freelancer is no longer required (the task is already in progress)") 
    else if (freelancer == account) then throw("You can't hire yourself")
    else {
        WriteSet([
            DataEntry(getKeyTaskFreelancer(task), freelancer),
            DataEntry(getKeyTaskStatus(task), INPROGRESS)
        ])
    }
}

@Callable(i)
func sendMessage(task: String, to: String, message: String) = {
    let account = toBase58String(i.caller.bytes)
    let cnt = getValueUserMessagesCnt(account, to) + 1
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (account == to) then throw("You can't send messages to yourself")
    else if (getValueUserBio(account) == NONE) then throw("Sender not signup")
    else if (getValueUserBio(to) == NONE) then throw("Recipient not singup")
    else {
        WriteSet([
            DataEntry(getKeyUserMessagesCnt(account, to), cnt),
            DataEntry(getKeyUserMessage(account, to, toString(cnt)), message),
            DataEntry(getKeyUserMessageBlock(account, to, toString(cnt)), height)
        ])
    }
}

@Callable(i)
func taskUpdate(task: String, data: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueTaskAuthor(task) != account) then throw("You're not author")
    else if (getValueTaskStatus(task) == INPROGRESS) then throw("Editing tasks is not available after hiring a freelancer") 
    else {
        WriteSet([
            DataEntry(getKeyTaskData(task), data)
        ])
    }
}

@Callable(i)
func userUpdate(data: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data)
        ])
    }
}

@Callable(i)
func reportCompleteTask(task: String) = {
    let account = toBase58String(i.caller.bytes)
    let stage = getValueTaskReportCompleteCnt(task, account) + 1
    let taskCreator = getValueTaskAuthor(task)
    let status = getValueTaskStatus(task)
    let freelancerMessagesCnt = getValueUserMessagesCnt(account, taskCreator)
    let lastFreelancerMessage = getValueUserMessage(account, taskCreator, toString(freelancerMessagesCnt))
    if (getValueTaskFreelancer(task) == account) then {
        if (status == INPROGRESS) then {
            WriteSet([
                DataEntry(getKeyTaskReportComplete(account, task, toString(stage)), freelancerMessagesCnt),
                DataEntry(getKeyTaskStatus(task), PENDING)
            ])
        } else if (status == COMPLETED) then throw("You've already been paid for your work")
        else throw("The work is awaiting approval")
    }
    else if (getValueTaskFreelancer(task) == NONE) then throw("Task freelancer doesnt exist")
    else if (getValueTaskAuthor(task) == account) then throw("You are author")
    else throw("Error #1")

}

@Callable(i)
func acceptWork (task: String, complete: Boolean) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let freelancer = getValueTaskFreelancer(task)
    let stage = getValueTaskReportCompleteCnt(task, freelancer)
    let status = getValueTaskStatus(task)
    let bank = getValueTaskBank(task)
    if (account == creator) then {
        if (status == PENDING) then {
            if (complete) then {
                ScriptResult(
                    WriteSet([
                        DataEntry(getKeyTaskStatus(task), COMPLETED)
                    ]),
                    TransferSet([
                        ScriptTransfer(addressFromStringValue(freelancer), bank, unit)
                    ])
                )
            } else {
                WriteSet([
                        DataEntry(getKeyTaskStatus(task), INPROGRESS)
                ])
            }
        } else throw("Freelancer doesnt complete the task")
    } else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueUserBio(account) == NONE) then throw("Sender not signup")
    else throw("You are not author")
}

@Callable(i)
func moveDeadline(task: String, deadline: Int) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let expiration = getValueTaskExpiration(task)
    let status = getValueTaskStatus(task)
    if (status != COMPLETED) then throw("The task is completed")
    else if (status == INDISPUTE) then throw("You can't change the deadline at this time")
    else if (account != creator) then throw("You are not author of the task")
    else if (deadline < height) then throw("The deadline must be > the current block")
    else if (deadline < expiration) then throw("The deadline can only be moved forward")
    else {
        WriteSet([
            DataEntry(getKeyTaskExpiration(task), deadline)
        ])
    }
    
}