{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let FEATURED = "featured"
let DAPP = ""
let MOD = "mod"
let REGISTERED = "registered"
let CREATOR = "3MsTLizEg4vqNgD7ZVjhkPaZgsrN11JqzLJ"
let INPROGRESS = "in progress"
let COMPLETED = "completed"
let PENDING = "pending"
let INDISPUTE = "in dispute"
let REVISION = "revision"
let CANCELED = "canceled"
let DECRYBEFEE = 2 / 100
let WAVESLET = 100000000

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
            case a:String => a
            case _ => NONE
    }
    str
}

func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
    num
}

func getKeyUserMessagesCnt(from: String, to: String) = {
    "msg_cnt_" + from + "_" + to
}

func getValueUserMessagesCnt(from: String, to: String) = {
    getNumberByKey(getKeyUserMessagesCnt(from, to))
}

# Task Message
func getKeyUserMessage(from: String, to: String, id: String) = {
    "msg_" + from + "_" + to + "_id:" + id
}

func getValueUserMessage(from: String, to: String, cnt: String) = {
    getStrByKey(getKeyUserMessage(from, to, cnt))
}

func getKeyUserMessageBlock(from: String, to: String, cnt: String) = {
    "block_msg_" + from + "_" + to + "_id:" + cnt
}

func getValueUserMessageBlock(from: String, to: String, cnt: String) = {
    getStrByKey(getKeyUserMessageBlock(from, to, cnt))
}
# Task Data
func getKeyTaskData(task: String) = {
    "datajson_" + task
}

func getValueTaskData(task: String) = {
    getStrByKey(getKeyTaskData(task))
}

# Task author section
func getKeyTaskAuthor (task: String) = {
    "author_" + task
}

func getValueTaskAuthor(task: String) = {
    
    getStrByKey(getKeyTaskAuthor(task))
}

# Task Block
func getKeyTaskBlock(task: String) = {
    "block_" + task
}

func getValueTaskBlock(task: String) = {
    getNumberByKey(getKeyTaskBlock(task))
}

# Task Bank
func getKeyTaskBank(task: String) = {
    "bank_" + task
}

func getValueTaskBank(task: String) = {
    getNumberByKey(getKeyTaskBank(task))
}

# Task Freelancer
func getKeyTaskFreelancer(task: String) = {
    "freelancer_" + task
}

func getValueTaskFreelancer(task: String) = {
    getStrByKey(getKeyTaskFreelancer(task))
}

# Task Status
func getKeyTaskStatus(task: String) = {
    "status_" + task
}

func getValueTaskStatus(task: String) = {
    getStrByKey(getKeyTaskStatus(task))
}

# Task Expiration
func getKeyTaskExpiration(task: String) = {
    "expiration_block_" + task
}

func getValueTaskExpiration(task: String) = {
    getNumberByKey(getKeyTaskExpiration(task))
}

# User Bio
func getKeyUserBio(account: String) = {
    "user_bio_" + account
}

func getValueUserBio(account: String) = {
    getStrByKey(getKeyUserBio(account))
}

# User Status
func getKeyUserStatus(account: String) = {
    "user_sts_" + account
}

func getValueUserStatus(account: String) = {
    getStrByKey(getKeyUserStatus(account))
}

# User Block
func getKeyUserBlock(account: String) = {
    "user_blk_" + account
}

# Task Report Complete
func getKeyTaskReportComplete(freelancer: String, task: String, stage: String) = {
    "rc_" + task + "_" + freelancer + "_stage:" + stage
}

func getValueTaskReportComplete(freelancer: String, task: String, stage: String) = {
    getStrByKey(getKeyTaskReportComplete(freelancer, task, stage))
}

# Report complete task count
func getKeyTaskReportCompleteCnt(task: String, freelancer: String) = {
    "rc_cnt_" + task + "_" + freelancer
}

func getValueTaskReportCompleteCnt(task: String, freelancer: String) = {
    getNumberByKey(getKeyTaskReportCompleteCnt(task, freelancer))
}

# Decrybe balance
func getKeyDecrybeBalance() = {
    "decrybe_balance"
}

func getValueDecrybeBalance() = {
    getNumberByKey(getKeyDecrybeBalance())
}

# Task rating
func getKeyTaskRating(task: String) = {
    "task_rating_" + task
}

func getValueTaskRating(task: String) = {
    getNumberByKey(getKeyTaskRating(task))
}

# Task rating vote
func getKeyTaskUserVoteRating(task: String, user: String) = {
    "task_vote_" + task + "_" + user
}

func getValueTaskUserVoteRating(task: String, user: String) = {
    getStrByKey(getKeyTaskUserVoteRating(task, user))
}

# User rating
func getKeyUserRating(user: String) = {
    "user_rating_" + user
}

func getValueUserRating(user: String) = {
    getNumberByKey(getKeyUserRating(user))
}

# User rating vote
func getKeyUserRatingVote(user: String, voting: String) = {
    "user_vote_" + user + voting
}

func getValueUserRatingVote(user: String, voting: String) = {
    getStrByKey(getKeyUserRatingVote(user, voting))
}

# Open dispute
func getKeyTaskDispute(task: String) = {
    "task_dispute_" + task
}

func getValueTaskDispute(task: String) = {
    getStrByKey(getKeyTaskDispute(task))
}

# Vote for customer
func getKeyTaskDisputeVoteCustomer(task: String) = {
    "task_dispvote_cst_" + task
}

func getValueTaskDisputeVoteCustomer(task: String) = {
    getNumberByKey(getKeyTaskDisputeVoteCustomer(task))
}

# Vote for freelancer
func getKeyTaskDisputeVoteFreelancer(task: String) = {
    "task_dispvote_flr_" + task
}

func getValueTaskDisputeVoteFreelancer(task: String) = {
    getNumberByKey(getKeyTaskDisputeVoteFreelancer(task))
}

# Dispute message
func getKeyTaskDisputeMessage(task: String, sender: String, id: String) = {
    "task_dispmsg_" + task + "_" + sender + "_id:" + id
}

func getValueTaskDisputeMessage(task: String, sender: String, id: String) = {
    getStrByKey(getKeyTaskDisputeMessage(task, sender, id))
}

# Dispute message block
func getKeyTaskDisputeMessageBlock(task: String, sender: String, id: String) = {
    "task_dispmsg_blk_" + task + "_" + sender + "_id:" + id
}

func getValueTaskDisputeMessageBlock(task: String, sender: String, id: String) = {
    getStrByKey(getKeyTaskDisputeMessageBlock(task, sender, id))
}

# Dispute message count
func getKeyTaskDisputeMessagesCnt(task: String, user: String) = {
    "task_dispmsg_cnt_" + task + "_" + user
}

func getValueTaskDisputeMessagesCnt(task: String, user: String) = {
    getNumberByKey(getKeyTaskDisputeMessagesCnt(task, user))
}

# Dispute comment
func getKeyTaskDisputeComment(task: String, sender: String) = {
    "task_dispcom_" + task + "_" + sender
}

func getValueTaskDisputeComment(task: String, sender: String) = {
    getStrByKey(getKeyTaskDisputeComment(task, sender))
}

# Dispute comment block
func getKeyTaskDisputeCommentBlock(task: String, sender: String) = {
    "task_dispcom_blk_" + task + "_" + sender
}

func getValueTaskDisputeCommentBlock(task: String, sender: String) = {
    getStrByKey(getKeyTaskDisputeCommentBlock(task, sender))
}

# Dispute variant
func getKeyTaskDisputeVoteVariant(task: String, user: String) = {
    "task_dispvar_" + task + "_" + user
}

func getValueTaskDisputeVoteVariant(task: String, user: String) = {
    getStrByKey(getKeyTaskDisputeVoteVariant(task, user))
}

@Callable(i)
func withdrawDecrybeBalance(amount: Int) = {
    let account = toBase58String(i.caller.bytes)
    let balance = getValueDecrybeBalance()
    if (account == CREATOR) then {
        if (amount <= balance) then {
            TransferSet([
                ScriptTransfer(addressFromStringValue(account), amount, unit)
            ])
        } else throw("You cannot withdraw an amount greater than " + toString(balance))
    } else throw("You can't do that")
}

@Callable(i)
func createTask(task: String, expiration: Int, data: String) = {
    let account = toBase58String(i.caller.bytes)
    let pmt = extract(i.payment)
    let pmtAmount = pmt.amount
    let payment = (pmtAmount / (1*WAVESLET + DECRYBEFEE)) * WAVESLET
    let commission = pmtAmount - payment
    if (isDefined(pmt.assetId)) then throw("Can use waves only at the moment")
    else {
        if (pmtAmount == 0) then throw("Amount must be higher then 0")
        else if (getValueTaskAuthor(task) != NONE) then throw("Task already exist")
        else if (getValueUserBio(account) == NONE) then throw("User not signup")
        else WriteSet([
            DataEntry(getKeyTaskAuthor(task), account),
            DataEntry(getKeyTaskBlock(task), height),
            DataEntry(getKeyTaskExpiration(task), height + expiration),
            DataEntry(getKeyTaskBank(task), payment),
            DataEntry(getKeyTaskStatus(task), FEATURED),
            DataEntry(getKeyTaskData(task), data),
            DataEntry(getKeyDecrybeBalance(), getValueDecrybeBalance() + commission),
            DataEntry(getKeyTaskRating(task), 0)
        ])
    }
}

@Callable(i)
func signUp(data: String) = { 
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) != NONE) then throw("User already exist")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data),
            DataEntry(getKeyUserBlock(account), height),
            DataEntry(getKeyUserStatus(account), REGISTERED)
        ])
    }
    
}

@Callable(i)
func hireFreelancer(task: String, freelancer: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueUserBio(account) == NONE) then throw("Customer not signup")
    else if (getValueUserBio(freelancer) == NONE) then throw("Freelancer not signup")
    else if (getValueTaskAuthor(task) != account) then throw("You're not author")
    else if (getValueTaskStatus(task) != FEATURED) then throw("Freelancer is no longer required") 
    else if (freelancer == account) then throw("You can't hire yourself")
    else if (getValueUserMessage(freelancer, account, "1") == NONE) then throw("The freelancer was not attached to the task")
    else {
        WriteSet([
            DataEntry(getKeyTaskFreelancer(task), freelancer),
            DataEntry(getKeyTaskStatus(task), INPROGRESS)
        ])
    }
}

@Callable(i)
func sendMessage(task: String, to: String, message: String) = {
    let account = toBase58String(i.caller.bytes)
    let cnt = getValueUserMessagesCnt(account, to) + 1
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (account == to) then throw("You can't send messages to yourself")
    else if (getValueUserBio(account) == NONE) then throw("Sender not signup")
    else if (getValueUserBio(to) == NONE) then throw("Recipient not singup")
    else {
        WriteSet([
            DataEntry(getKeyUserMessagesCnt(account, to), cnt),
            DataEntry(getKeyUserMessage(account, to, toString(cnt)), message),
            DataEntry(getKeyUserMessageBlock(account, to, toString(cnt)), height)
        ])
    }
}

@Callable(i)
func taskUpdate(task: String, data: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueTaskAuthor(task) != account) then throw("You're not author")
    else if (getValueTaskStatus(task) != FEATURED) then throw("Editing tasks is not available after hiring a freelancer") 
    else {
        WriteSet([
            DataEntry(getKeyTaskData(task), data)
        ])
    }
}

@Callable(i)
func userUpdate(data: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data)
        ])
    }
}

@Callable(i)
func reportCompleteTask(task: String) = {
    let account = toBase58String(i.caller.bytes)
    let stage = getValueTaskReportCompleteCnt(task, account) + 1
    let taskCreator = getValueTaskAuthor(task)
    let status = getValueTaskStatus(task)
    let freelancerMessagesCnt = getValueUserMessagesCnt(account, taskCreator)
    let lastFreelancerMessage = getValueUserMessage(account, taskCreator, toString(freelancerMessagesCnt))
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (getValueTaskAuthor(task) == account) then throw("You are author")
    else if (getValueTaskFreelancer(task) != account) then throw("You are not freelancer")
    else if (status != INPROGRESS) then throw("Status must be in progress, now: " + status)
    else if (getValueTaskFreelancer(task) == NONE) then throw("Task freelancer doesnt exist")
    else WriteSet([
            DataEntry(getKeyTaskReportComplete(account, task, toString(stage)), freelancerMessagesCnt),
            DataEntry(getKeyTaskStatus(task), PENDING)
    ])

}

@Callable(i)
func acceptWork (task: String, complete: Boolean) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let freelancer = getValueTaskFreelancer(task)
    let stage = getValueTaskReportCompleteCnt(task, freelancer)
    let status = getValueTaskStatus(task)
    let bank = getValueTaskBank(task)
    if (getValueUserBio(account) == NONE) then throw("Sender not signup")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (account != creator) then throw("You are not author")
    else if (status != PENDING) then throw("Freelancer doesnt complete the task")
    else {
        if (complete) then {
            ScriptResult(
                WriteSet([
                    DataEntry(getKeyTaskStatus(task), COMPLETED),
                    DataEntry(getKeyUserRating(freelancer), getValueUserRating(freelancer) + 1), # need rework
                    DataEntry(getKeyUserRatingVote(account, freelancer), "positive"),
                    DataEntry(getKeyTaskBank(task), "0")
                ]),
                TransferSet([
                    ScriptTransfer(addressFromStringValue(freelancer), bank, unit)
                ])
            )
        } else {
            WriteSet([
                    DataEntry(getKeyTaskStatus(task), INPROGRESS)
            ])
        }
    }
}

@Callable(i)
func moveDeadline(task: String, deadline: Int) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let expiration = getValueTaskExpiration(task)
    let status = getValueTaskStatus(task)
    if (status == COMPLETED) then throw("The task is completed")
    else if (status == INDISPUTE) then throw("You can't change the deadline at this time")
    else if (account != creator) then throw("You are not author of the task")
    else if (deadline < height) then throw("The deadline must be > the current block")
    else if (deadline < expiration) then throw("The deadline can only be moved forward")
    else {
        WriteSet([
            DataEntry(getKeyTaskExpiration(task), deadline)
        ])
    }
    
}

@Callable(i)
func voteTask (task: String, vote: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (getValueTaskAuthor(task) == account) then throw("You cannot change the rating of a task")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueTaskStatus(task) != FEATURED) then throw("Now you can’t lower the task rating")
    else if (getValueTaskUserVoteRating(task, account) != NONE) then throw("You have already voted")
    else {
        if (vote == "positive") then {
            WriteSet([
                DataEntry(getKeyTaskRating(task), getValueTaskRating(task) + 1),
                DataEntry(getKeyTaskUserVoteRating(task, account), "positive")
            ])
        } else if (vote == "negative") then {
            WriteSet([
                DataEntry(getKeyTaskRating(task), getValueTaskRating(task) - 1),
                DataEntry(getKeyTaskUserVoteRating(task, account), "negative")
            ])
        } else throw("Use positive/negative only")
    }
    
}

@Callable(i)
func reportUser (user: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("You not signup")
    else if (getValueUserBio(user) == NONE) then throw("User not signup")
    else if (user == account) then throw("You can't complain about yourself")
    else if (getValueUserRatingVote(account, user) != NONE) then throw("You have already voted")
    else {
         WriteSet([
            DataEntry(getKeyUserRating(user), getValueUserRating(user) - 1),
            DataEntry(getKeyUserRatingVote(account, user), "negative")
        ])
    }
}

@Callable (i)
func openTaskDispute (task: String, message: String) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let freelancer = getValueTaskFreelancer(task)
    let status = getValueTaskStatus(task)
    if (getValueUserBio(account) == NONE) then throw("You not signup")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (account != creator && account != freelancer) then throw("You must be a freelancer (" + freelancer + ") or a customer (" + creator + ") of this task")
    else if (status == INDISPUTE) then throw("Dispute already open")
    else if (status != INPROGRESS && status != PENDING) then throw("You can't create a dispute right now")
    else {
        WriteSet([
            DataEntry(getKeyTaskDispute(task), account),
            DataEntry(getKeyTaskDisputeMessage(task, account, "0"), message),
            DataEntry(getKeyTaskDisputeMessageBlock(task, account, "0"), height),
            DataEntry(getKeyTaskStatus(task), INDISPUTE)

        ])
    }
}

@Callable (i)
func voteTaskDispute (task: String, variant: String, message: String) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let freelancer = getValueTaskFreelancer(task)
    if (getValueUserBio(account) == NONE) then throw("You not signup")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueTaskDispute(task) == NONE) then throw("Dispute doesnt exist")
    else if (account == creator) then throw("The creator of the task can not vote")
    else if (account == freelancer) then throw("The freelancer of the task can not vote")
    else if (getValueTaskDisputeVoteVariant(task, account) != NONE) then throw("You have already voted")
    else {
        if (variant == "customer") then {
            WriteSet([
                DataEntry(getKeyTaskDisputeVoteCustomer(task), getValueTaskDisputeVoteCustomer(task) + 1),
                DataEntry(getKeyTaskDisputeVoteVariant(task, account), "customer"),
                DataEntry(getKeyTaskDisputeComment(task, account), message),
                DataEntry(getKeyTaskDisputeCommentBlock(task, account), height)
            ])
        } else if (variant == "freelancer") then {
            WriteSet([
                DataEntry(getKeyTaskDisputeVoteFreelancer(task), getValueTaskDisputeVoteFreelancer(task) + 1),
                DataEntry(getKeyTaskDisputeVoteVariant(task, account), "freelancer"),
                DataEntry(getKeyTaskDisputeComment(task, account), message),
                DataEntry(getKeyTaskDisputeCommentBlock(task, account), height)
            ])
        } else throw("Select one of the sides")
    }

}

@Callable (i)
func taskDisputeMessage (task: String, message: String) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let freelancer = getValueTaskFreelancer(task)
    let cnt = getValueTaskDisputeMessagesCnt(task, account) + 1
    if (getValueUserBio(account) == NONE) then throw("You not signup")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueTaskDispute(task) == NONE) then throw("Dispute doesnt exist")
    else if (account != creator && account != freelancer) then throw("You must be a freelancer (" + freelancer + ") or a customer (" + creator + ") of this task")
    else if (getValueTaskStatus(task) != INDISPUTE) then throw("You cannot send messages at this time")
    else {
        WriteSet([
            DataEntry(getKeyTaskDisputeMessage(task, account, toString(cnt)), message),
            DataEntry(getKeyTaskDisputeMessageBlock(task, account, toString(cnt)), height),
            DataEntry(getKeyTaskDisputeMessagesCnt(task, account), cnt)

        ])
    }
}

@Callable (i)
func cancelTask (task: String) = {
    let account = toBase58String(i.caller.bytes)
    let creator = getValueTaskAuthor(task)
    let bank = getValueTaskBank(task)
    if (getValueUserBio(account) == NONE) then throw("You not signup")
    else if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (account != creator) then throw("You are not author of the task")
    else if (getValueTaskStatus(task) != FEATURED) then throw("You can't cancel the task now")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(getKeyTaskStatus(task), CANCELED)
            ]),
            TransferSet([
                ScriptTransfer(addressFromStringValue(creator), bank, unit)
            ])
        )
    }
}

@Callable (i)
func defineDisputeWinner (task: String) = {
    let account = toBase58String(i.caller.bytes)
    let customer = getValueTaskAuthor(task)
    let freelancer = getValueTaskFreelancer(task)
    let bank = getValueTaskBank(task)
    let votesForCustomer = getValueTaskDisputeVoteCustomer(task)
    let votesForFreelancer = getValueTaskDisputeVoteFreelancer(task)
    let totalVotes = votesForCustomer + votesForFreelancer
    # let votesForCustomerPercent = votesForCustomer  / totalVotes * 100
    # let votesForCustomerPercent = votesForCustomer  / totalVotes * 100
    if (getValueUserBio(account) == NONE) then throw("You not signup")
    else if (getValueTaskStatus(task) != INDISPUTE) then throw("The dispute is closed or not open")
    else if (totalVotes < 3) then throw("Need minimum 3 votes. Now: " + toString(totalVotes))
    else {
        if (votesForCustomer > votesForFreelancer) then {
            ScriptResult(
                WriteSet([
                    DataEntry(getKeyTaskStatus(task), COMPLETED)
                ]),
                TransferSet([
                    ScriptTransfer(addressFromStringValue(customer), bank, unit)
                ])
            )
        } else if (votesForCustomer < votesForFreelancer) then {
            ScriptResult(
                WriteSet([
                    DataEntry(getKeyTaskStatus(task), COMPLETED)
                ]),
                TransferSet([
                    ScriptTransfer(addressFromStringValue(freelancer), bank, unit)
                ])
            )
        } else {
            ScriptResult(
                WriteSet([
                    DataEntry(getKeyTaskStatus(task), COMPLETED)
                ]),
                TransferSet([
                    ScriptTransfer(addressFromStringValue(freelancer), bank/2, unit),
                    ScriptTransfer(addressFromStringValue(customer), bank/2, unit)
                ])
            )
        }
    }
}