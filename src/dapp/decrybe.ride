{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let FEATURED = "featured"
let DAPP = ""
let LISTINGFEE = (1 * 100000000)
let MOD = "mod"
let REGISTERED = "registered"
let ADMIN = "admin"
let INPROGRESS = "inprogress"

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
            case a:String => a
            case _ => NONE
    }
    str
}

func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
    num
}

func getKeyUserMessagesCnt(from: String, to: String) = {
    "msg_cnt_" + from + "_" + to
}

func getValueUserMessagesCnt(from: String, to: String) = {
    getNumberByKey(getKeyUserMessagesCnt(from, to))
}

# Task Message
func getKeyUserMessage(from: String, to: String, id: String) = {
    "msg_" + from + "_" + to + "_id:" + id
}

func getValueUserMessage(from: String, to: String, cnt: String) = {
    getStrByKey(getKeyUserMessage(from, to, cnt))
}

func getKeyUserMessageBlock(from: String, to: String, cnt: String) = {
    "block_msg_" + from + "_" + to + "_id:" + cnt
}
# Task Data
func getKeyTaskData(task: String) = {
    "datajson_" + task
}

func getValueTaskData(task: String) = {
    getStrByKey(getKeyTaskData(task))
}

# Task author section
func getKeyTaskAuthor (task: String) = {
    "author_" + task
}

func getValueTaskAuthor(task: String) = {
    
    getStrByKey(getKeyTaskAuthor(task))
}

# Task Block
func getKeyTaskBlock(task: String) = {
    "block_" + task
}

# Task Bank
func getKeyTaskBank(task: String) = {
    "bank_" + task
}

# Task Freelancer
func getKeyTaskFreelancer(task: String, account: String) = {
    "freelancer_" + task + "_" + account
}

func getValueTaskFreelancer(task: String, account: String) = {
    getStrByKey(getKeyTaskFreelancer(task, account))
}

# Task Status
func getKeyTaskStatus(task: String) = {
    "status_" + task
}

func getValueTaskStatus(task: String) = {
    getStrByKey(getKeyTaskStatus(task))
}

# Task Expiration
func getKeyTaskExpiration(task: String) = {
    "expiration_block_" + task
}

# User Bio
func getKeyUserBio(account: String) = {
    "user_bio_" + account
}

func getValueUserBio(account: String) = {
    getStrByKey(getKeyUserBio(account))
}

# User Status
func getKeyUserStatus(account: String) = {
    "user_sts_" + account
}

func getValueUserStatus(account: String) = {
    getStrByKey(getKeyUserStatus(account))
}

# User Block
func getKeyUserBlock(account: String) = {
    "user_blk_" + account
}

@Callable(i)
func createTask(task: String, expiration: Int, data: String) = {
    let account = toBase58String(i.caller.bytes)
    let pmt = extract(i.payment)
    if (isDefined(pmt.assetId)) then throw("Can use waves only at the moment")
    else {
        if (pmt.amount != LISTINGFEE) then throw("Please pay exact amount for the listing: " + toString(LISTINGFEE) + ", actual payment is: " + toString(pmt.amount))
        else if (getValueTaskAuthor(task) != NONE) then throw("Task already exist")
        else if (getValueUserBio(account) == NONE) then throw("User not signup")
        else WriteSet([
            DataEntry(getKeyTaskAuthor(task), account),
            DataEntry(getKeyTaskBlock(task), height),
            DataEntry(getKeyTaskExpiration(task), height + expiration),
            DataEntry(getKeyTaskBank(task), LISTINGFEE),
            DataEntry(getKeyTaskStatus(task), FEATURED),
            DataEntry(getKeyTaskData(task), data)
        ])
    }
}


# add check user reg
@Callable(i)
func signUp(data: String) = { 
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) != NONE) then throw("User already exist")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data),
            DataEntry(getKeyUserBlock(account), height),
            DataEntry(getKeyUserStatus(account), REGISTERED)
        ])
    }
    
}

@Callable(i)
func takeTask(task: String, comment: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (getValueTaskAuthor(task) == account) then throw("You're author")
    else if (getValueTaskStatus(task) == INPROGRESS) then throw("Freelancer is no longer required (the task is already in progress)") 
    else {
        WriteSet([
            DataEntry(getKeyTaskFreelancer(task, account), comment)
        ])
    }
}

@Callable(i)
func sendMessage(task: String, to: String, message: String) = {
    let account = toBase58String(i.caller.bytes)
    let cnt = getValueUserMessagesCnt(account, to) + 1
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (getValueTaskStatus(task) == INPROGRESS) then throw("Freelancer is no longer required (the task is already in progress)") 
    else {
        WriteSet([
            DataEntry(getKeyUserMessagesCnt(account, to), cnt),
            DataEntry(getKeyUserMessage(account, to, toString(cnt)), message),
            DataEntry(getKeyUserMessageBlock(account, to, toString(cnt)), height)
        ])
    }
}

@Callable(i)
func taskUpdate(task: String, data: String, type: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueTaskData(task) == NONE) then throw("Task doesnt exist")
    else if (getValueTaskAuthor(task) != account) then throw("You're not author")
    else {
        WriteSet([
            DataEntry(getKeyTaskData(task), data),
            DataEntry(getKeyTaskStatus(task), if (type == INPROGRESS) then INPROGRESS else FEATURED)
        ])
    }
}

@Callable(i)
func userUpdate(address: String, data: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (address != account) then throw("You're not the account owner")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data)
        ])
    }
}