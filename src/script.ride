{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let NONE = "none"
let FEATURED = "featured"
let DAPP = ""
let LISTINGFEE = (1 * 100000000)
let MOD = "mod"
let REGISTERED = "registered"
let ADMIN = "admin"
let INPROGRESS = "inprogress"

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
            case a:String => a
            case _ => NONE
    }
    str
}

func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
    num
}

# Item Data
func getKeyItemData(item: String) = {
    "datajson_" + item
}

func getValueItemData(item: String) = {
    getStrByKey(getKeyItemData(item))
}

# Task author section
func getKeyItemAuthor (item: String) = {
    "author_" + item
}

func getValueItemAuthor(item: String) = {
    getStrByKey(getKeyItemAuthor(item))
}

# Item Block
func getKeyItemBlock(item: String) = {
    "block_" + item
}

# Item Bank
func getKeyItemBank(item: String) = {
    "bank_" + item
}

# Item Freelancer
func getKeyItemFreelancer(item: String, account: String) = {
    "freelancer_" + item + "_" + account
}

func getValueItemFreelancer(item: String, account: String) = {
    getStrByKey(getKeyItemFreelancer(item, account))
}

# Item Status
func getKeyItemStatus(item: String) = {
    "status_" + item
}

func getValueItemStatus(item: String) = {
    getStrByKey(getKeyItemStatus(item))
}

# Item Expiration
func getKeyItemExpiration(item: String) = {
    "expiration_block_" + item
}

# User Bio
func getKeyUserBio(account: String) = {
    "user_bio_" + account
}

func getValueUserBio(account: String) = {
    getStrByKey(getKeyUserBio(account))
}

# User Status
func getKeyUserStatus(account: String) = {
    "user_sts_" + account
}

func getValueUserStatus(account: String) = {
    getStrByKey(getKeyUserStatus(account))
}

# User Block
func getKeyUserBlock(account: String) = {
    "user_blk_" + account
}

@Callable(i)
func createTask(item: String, expiration: Int, data: String) = {
    let account = toBase58String(i.caller.bytes)
    let pmt = extract(i.payment)
    if (isDefined(pmt.assetId)) then throw("Can use waves only at the moment")
    else {
        if (pmt.amount != LISTINGFEE) then throw("Please pay exact amount for the listing: " + toString(LISTINGFEE) + ", actual payment is: " + toString(pmt.amount))
        else if (getValueItemAuthor(item) != NONE) then throw("Task already exist")
        else if (getValueUserBio(account) == NONE) then throw("User not signup")
        else WriteSet([
            DataEntry(getKeyItemAuthor(item), account),
            DataEntry(getKeyItemBlock(item), height),
            DataEntry(getKeyItemExpiration(item), height + expiration),
            DataEntry(getKeyItemBank(item), LISTINGFEE),
            DataEntry(getKeyItemStatus(item), FEATURED),
            DataEntry(getKeyItemData(item), data)
        ])
    }
}


# add check user reg
@Callable(i)
func signUp(data: String, type: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) != NONE) then throw("User already exist")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data),
            DataEntry(getKeyUserBlock(account), height),
            DataEntry(getKeyUserStatus(account), if (type == MOD) then MOD else REGISTERED)
        ])
    }
    
}

@Callable(i)
func takeTask(item: String, comment: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueItemData(item) == NONE) then throw("Task doesnt exist")
    else if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (getValueItemAuthor(item) == account) then throw("You're author")
    else if (getValueItemStatus(item) == INPROGRESS) then throw("Freelancer is no longer required (the task is already in progress)") 
    else {
        WriteSet([
            DataEntry(getKeyItemFreelancer(item, account), comment)
        ])
    }
}

@Callable(i)
func taskUpdate(item: String, data: String, type: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueItemData(item) == NONE) then throw("Task doesnt exist")
    else if (getValueItemAuthor(item) != account) then throw("You're not author")
    else {
        WriteSet([
            DataEntry(getKeyItemData(item), data),
            DataEntry(getKeyItemStatus(item), if (type == INPROGRESS) then INPROGRESS else FEATURED)
        ])
    }
}

@Callable(i)
func userUpdate(address: String, data: String) = {
    let account = toBase58String(i.caller.bytes)
    if (getValueUserBio(account) == NONE) then throw("User not signup")
    else if (address != account) then throw("You're not the account owner")
    else {
        WriteSet([
            DataEntry(getKeyUserBio(account), data)
        ])
    }
}